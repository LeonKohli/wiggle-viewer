#!/bin/bash

# Wigle Explorer Test Runner
# Part of the Wigle Explorer project
# Usage: ./wigle-test [path/to/database.sqlite]
#
# This script runs automated tests on the Wigle Explorer application
# to verify performance and functionality with large databases.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}Wigle Explorer Test Runner${NC}"
echo "=========================="
echo ""

# Check if database path is provided
if [ $# -eq 0 ]; then
    echo -e "${YELLOW}Usage: $0 <path/to/database.sqlite>${NC}"
    echo ""
    echo "Run automated tests on Wigle Explorer with a specific database."
    echo "The test will verify:"
    echo "  - Stack overflow fixes work correctly"
    echo "  - All views load without errors"
    echo "  - Performance with large datasets"
    echo "  - Filtering functionality"
    exit 1
fi

DB_PATH="$1"

# Verify database exists
if [ ! -f "$DB_PATH" ]; then
    echo -e "${RED}Error: Database file not found: $DB_PATH${NC}"
    exit 1
fi

DB_SIZE=$(du -h "$DB_PATH" | cut -f1)
echo "Database: $DB_PATH"
echo "Size: $DB_SIZE"
echo ""

# Find an available port
PORT=8890
while lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; do
    PORT=$((PORT + 1))
done

echo "Starting test server on port $PORT..."
python3 -m http.server $PORT > /dev/null 2>&1 &
SERVER_PID=$!

# Give server time to start
sleep 1

# URL encode the database path
ENCODED_PATH=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$1'))")

echo "Opening test interface..."
echo ""
echo -e "${YELLOW}Please select the database file when the file picker opens.${NC}"
echo -e "${YELLOW}The automated tests will run after the file loads.${NC}"
echo ""
echo "The test will verify:"
echo "  ✓ Stack overflow fixes (calculateTimeRange, estimateCoverageArea)"
echo "  ✓ All views load correctly (heatmap, markers, analysis, timeline)"
echo "  ✓ Filtering functionality"
echo "  ✓ Performance with your ${DB_SIZE} database"
echo ""

# Open the test page
open "http://localhost:$PORT/index.html?test=true&automated=true&dbpath=$ENCODED_PATH"

echo "Test running..."
echo "Press Ctrl+C to stop the test server"
echo ""

# Cleanup on exit
cleanup() {
    echo ""
    echo "Stopping test server..."
    kill $SERVER_PID 2>/dev/null || true
    echo -e "${GREEN}Test complete!${NC}"
}

trap cleanup EXIT

# Wait for user to stop
wait $SERVER_PID